"""Subclass of LinRegrDialog.py, which is generated by wxFormBuilder."""
from pandas.core.frame import DataFrame
import wx
import GeneratedGUI
from PersistClasses import *
from MultiReg import *

# Implementing LinRegrDialog.py
class PexDbViewerLinRegrDialog( GeneratedGUI.LinRegrDialog ):
	def __init__( self, parent, fact : sqp.SQFactory, proj : Project ):
		GeneratedGUI.LinRegrDialog.__init__(self, parent)
		self._f = fact
		self._p = proj

	def LinRegrDialogOnInitDialog( self, event ):
		self._solver = MultiReg(self._f, self._p)
		self._solver.read_data()
		


	def LinRegrDialogOnShow( self, event ):
		if event.Show is False:
			return

		df = self._solver.dataframe
		
		meanl = []
		for rprep in sqp.SQQuery(self._f, ProjectResponsePreparation).where(ProjectResponsePreparation.ProjectId==self._p._id):
			meanl.append(rprep.responsedefinition.abbreviation)	
		
		mi = df.mean(meanl)
		std= df.std()
	
		self.m_inputDataDLCTRL.AppendTextColumn("#")
		for abbr, fact in self._solver.factdict.items():
			col = self.m_inputDataDLCTRL.AppendTextColumn(fact.name)

		for abbr, resp in self._solver.respdict.items():
			self.m_inputDataDLCTRL.AppendTextColumn(resp.name)
		
		drow = []
		for idx, row in mi.iterrows():
			drow.clear()
			drow.append(str(idx))
			for abbr in self._solver.factdict:
				drow.append(str(row[abbr]))

			for abbr in self._solver.respdict:
				drow.append(str(row[abbr]))

			self.m_inputDataDLCTRL.AppendItem(drow)