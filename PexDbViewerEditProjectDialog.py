"""Subclass of EditProjectDialog, which is generated by wxFormBuilder."""

import wx
from wx.core import NOT_FOUND
import logging
import GeneratedGUI
from GuiHelper import GuiHelper
from PersistClasses import *
from PexDbViewerAddSubElementDialog import PexDbViewerAddSubElementDialog
from PexDbViewerEditPreparation import PexDbViewerEditPreparation
from PexDbViewerEditResponsePreparation import PexDbViewerEditResponsePreparation
import sqlitepersist as sqp
from Validators import MergeFormulaValidator

# Implementing EditProjectDialog
class PexDbViewerEditProjectDialog( GeneratedGUI.EditProjectDialog ):

	@property
	def project(self):
		return self._project

	def __init__( self, parent, fact : sqp.SQFactory, proj : Project ):
		GeneratedGUI.EditProjectDialog.__init__( self, parent )
		self._logger = logging.getLogger("mainprog")
		self._logger.debug("Init for class <%s>", self.__class__.__name__)
		self._fact = fact
		self._project = proj
		self._factorpreps = []
		self._responsepreps = []
		self._enviropreps = []

	def replace_spaces(self, inps : str) -> str:
		if inps is None:
			return None

		return inps.replace(" ", "_")

	def EditProjectDialogOnInitDialog(self, event):
		self._logger.debug("OnInit for class <%s>", self.__class__.__name__)
		connf_q = sqp.SQQuery(self._fact, ProjectFactorPreparation).where(ProjectFactorPreparation.ProjectId==self._project._id)
		self._factorpreps = list(connf_q)
		for fprep in self._factorpreps:
			self._fact.fill_joins(fprep, ProjectFactorPreparation.FactorCombiDefs)

		connr_q = sqp.SQQuery(self._fact, ProjectResponsePreparation).where(ProjectResponsePreparation.ProjectId==self._project._id)
		self._responsepreps = list(connr_q)

		globals = {}
		for respprep in self._responsepreps:
			globals[self.replace_spaces(respprep.responsedefinition.name)] = 1.0

		self.m_mergeFormulaTBX.SetValidator(MergeFormulaValidator(globals))

		enviro_q = sqp.SQQuery(self._fact, ProjectEnviroPreparation).where(ProjectEnviroPreparation.ProjectId==self._project._id)
		self._enviropreps = list(enviro_q)

		self.m_prepsLCTRL.InsertColumn(0, "Factor", width=170)
		self.m_prepsLCTRL.InsertColumn(1, "Subs", wx.LIST_FORMAT_RIGHT)
		self.m_prepsLCTRL.InsertColumn(2, "Min.", wx.LIST_FORMAT_RIGHT)
		self.m_prepsLCTRL.InsertColumn(3, "Max.",  wx.LIST_FORMAT_RIGHT)
		self.m_prepsLCTRL.InsertColumn(4, "Levels",  wx.LIST_FORMAT_RIGHT)

		ps_q = sqp.SQQuery(self._fact, ProjectStatusCat).where(ProjectStatusCat.LangCode==self._fact.lang)
		self._pstatcat = []
		ct = 0
		sel = wx.NOT_FOUND
		for ps in ps_q:
			self._pstatcat.append(ps)
			if not self._project.status is None and ps.code == self._project.status.code:
				sel = ct
			ct += 1
		choicevals = list(map(lambda ps : ps.value, self._pstatcat))
		self.m_projectstatusCOB.SetItems(choicevals)
		self.m_projectstatusCOB.SetSelection(sel)
		self._logger.debug("OnInit for class <%s> successful", self.__class__.__name__)

		return True


	def EditProjectDialogOnShow( self, event ):
		self._logger.debug("OnShow for class <%s> with Show=<%s>", self.__class__.__name__, str(event.Show))
		if event.Show is False:
			return

		self.fill_gui(self._project)
		self._logger.debug("OnShow for class <%s> successfull", self.__class__.__name__)


	def get_txtval(self, text, default=""):
		if text is None:
			return default
		else:
			return text

	def get_boolval(self, bo, default=False):
		if bo is None:
			return default
		else:
			return bo

	def fill_gui(self, pro : Project):
		self.m_nameTB.SetValue(pro.name)
		self.m_isArchivedCBX.SetValue(pro.isarchived)
		self.m_descriptionTBX.SetValue(self.get_txtval(pro.description))
		self.m_doMergeCBX.SetValue(self.get_boolval(pro.domergecalculation))
		self.m_mergeFormulaTBX.SetValue(self.get_txtval(pro.mergeformula))
		if pro.domergecalculation is not None:
			self.m_mergeFormulaTBX.Enable(pro.domergecalculation)
		else:
			self.m_mergeFormulaTBX.Enable(False)

		self.m_prepsLCTRL.DeleteAllItems()
		
		ct = 0
		for fprep in self._factorpreps:
			subfacnum = len(fprep.factorcombidefs)
			if subfacnum > 0:
				subfacnums = str(len(fprep.factorcombidefs))
			else:
				subfacnums = ""

			idx = self.m_prepsLCTRL.InsertItem(self.m_prepsLCTRL.GetColumnCount(), fprep.factordefinition.name)
			self.m_prepsLCTRL.SetItemData(idx, ct)
			self.m_prepsLCTRL.SetItem(idx, 1, subfacnums)
			self.m_prepsLCTRL.SetItem(idx, 2, str(fprep.minvalue))
			self.m_prepsLCTRL.SetItem(idx, 3, str(fprep.maxvalue))
			self.m_prepsLCTRL.SetItem(idx, 4, str(fprep.levelnum))
			ct += 1

		self._fill_list(self.m_respPrepsLCTR, self._responsepreps)
		self._fill_list(self.m_envoroPrepsLCTRL, self._enviropreps)

	def _fill_list(self, lctr, litems : list):
		lctr.ClearAll()
		lctr.InsertColumn(0, "Name", width=200)
		lctr.InsertColumn(1, "Unit", width=80)

		ct = 0
		for litem in litems:
			idx = lctr.InsertItem(lctr.GetColumnCount(), litem.name)
			lctr.SetItemData(idx, ct)
			lctr.SetItem(idx, 1, str(litem.unit))
			ct += 1
		

	def m_okcancelBUTSOnOKButtonClick( self, event ):
		if not self.Validate():
			return

		self._project.name = self.m_nameTB.GetValue()
		self._project.isarchived = self.m_isArchivedCBX.GetValue()
		self._project.description = self.m_descriptionTBX.GetValue()
		self._project.domergecalculation = self.m_doMergeCBX.GetValue()
		self._project.mergeformula = self.m_mergeFormulaTBX.GetValue()

		statidx = self.m_projectstatusCOB.GetSelection()
		if statidx == wx.NOT_FOUND:
			self._project.status = None
		else:
			self._project.status = self._pstatcat[statidx]

		self.EndModal(wx.ID_OK)

	def m_doMergeCBXOnCheckBox(self, event):
		formactive = self.m_doMergeCBX.GetValue()
		if formactive is not None and formactive==True:
			self.m_mergeFormulaTBX.Enable(True)
		else:
			self.m_mergeFormulaTBX.Enable(False)

	def m_connfactorBUOnButtonClick( self, event ):
		not_these_ids = list(map(lambda pr : pr.factordefinitionid, self._factorpreps))
		dial = PexDbViewerAddSubElementDialog(self, 
			self._fact,
			sqp.SQQuery(self._fact, FactorDefinition).where((FactorDefinition.IsActive==True) & sqp.NotIsIn(FactorDefinition.Id, not_these_ids)),
			"factor definition")

		res = dial.ShowModal()
		if res == wx.ID_CANCEL:
			return

		newfact = dial.selected

		newprep = ProjectFactorPreparation(projectid=self._project._id, 
			factordefinitionid = newfact._id,
			factordefinition=newfact,
			minvalue = newfact.defaultmin,
			maxvalue = newfact.defaultmax,
			levelnum = newfact.defaultlevelnum)

		self._fact.flush(newprep)
		newprep.factorcombidefs = []
		self._factorpreps.append(newprep)
		self.fill_gui(self._project)


	def m_removefactorBUOnButtonClick( self, event ):
		selidx = self.m_prepsLCTRL.GetFirstSelected()

		if selidx==wx.NOT_FOUND:
			wx.MessageBox("please select a factor preparation to be removed")
			return

		idx = self.m_prepsLCTRL.GetItemData(selidx)
		remoprep = self._factorpreps.pop(idx)

		self._fact.delete(remoprep)		
		self.fill_gui(self._project)

	def edit_fact_prep(self, factprep):
		dial = PexDbViewerEditPreparation(self,
			self._fact,
			self._project,
			factprep)
			
		res = dial.ShowModal()
		if res == wx.ID_CANCEL:
			return

		self._fact.flush(dial.editedprep)
		factprep = dial.editedprep
		self.fill_gui(self._project)
		
	def editPrepBUOnButtonClick(self, event):
		selfprep = GuiHelper.get_selected_item(self.m_prepsLCTRL, self._factorpreps)
		if selfprep is None:
			wx.MessageBox("please select a factor preparation to be edited")
			return

		self.edit_fact_prep(selfprep)
		

	def m_editRespPrepBUTOnButtonClick(self, event):
		selit = self.m_respPrepsLCTR.GetFirstSelected()
		if selit is wx.NOT_FOUND:
			return

		selidx = self.m_respPrepsLCTR.GetItemData(selit)
		rprep = self._responsepreps[selidx]
		dial = PexDbViewerEditResponsePreparation(self, rprep)
		res = dial.ShowModal()

		if res != wx.ID_OK:
			return

		self._responsepreps[selidx] = dial.respprep
		self._fact.flush(dial.respprep)
		self.fill_gui(self._project)


	def m_addRespPrepBUTOnButtonClick(self, event):
		not_these_ids = list(map(lambda pr : pr.responsedefinitionid, self._responsepreps))
		q = sqp.SQQuery(self._fact, ResponseDefinition).where((ResponseDefinition.IsActive==True) & sqp.NotIsIn(ResponseDefinition.Id, not_these_ids))
		dial = PexDbViewerAddSubElementDialog(self,
			self._fact,
			q,
			"response definition")
			
		res = dial.ShowModal()

		if res == wx.ID_CANCEL:
			return

		selresp = dial.selected

		newprep = ProjectResponsePreparation(projectid=self._project._id, 
		 	responsedefinitionid = selresp._id,
		 	responsedefinition=selresp)

		self._fact.flush(newprep)
		self._responsepreps.append(newprep)
		self.fill_gui(self._project)

	def m_deleteRespPrepBUTOnButtonClick(self, event):
		selidx = self.m_respPrepsLCTR.GetFirstSelected()

		if selidx==wx.NOT_FOUND:
			wx.MessageBox("please select a response preparation to be removed")
			return

		idx = self.m_respPrepsLCTR.GetItemData(selidx)
		remoprep = self._responsepreps.pop(idx)

		self._fact.delete(remoprep)		
		self.fill_gui(self._project)

	def m_editEnviroBUTOnButtonClick(self, event):
		event.Skip()

	def m_addEnviroBUTOnButtonClick(self, event):
		not_these_ids = list(map(lambda pr : pr.envirodefinitionid, self._enviropreps))
		q = sqp.SQQuery(self._fact, EnviroDefinition).where((EnviroDefinition.IsActive==True) & sqp.NotIsIn(EnviroDefinition.Id, not_these_ids))

		dial = PexDbViewerAddSubElementDialog(self, 
			self._fact, 
			q, 
			"environment definition")
		res = dial.ShowModal()

		if res != wx.ID_OK:
			return

		evp = ProjectEnviroPreparation(projectid=self._project._id,
			envirodefinition=dial.selected,
			envirodefinitionid = dial.selected._id)

		self._fact.flush(evp)
		self._enviropreps.append(evp)
		self.fill_gui(self._project)

	def m_removeEnviroBUTOnButtonClick(self, event):
		selidx = self.m_envoroPrepsLCTRL.GetFirstSelected()

		if selidx==wx.NOT_FOUND:
			wx.MessageBox("please select an environment factor preparation to be removed")
			return

		idx = self.m_envoroPrepsLCTRL.GetItemData(selidx)
		remoenv = self._enviropreps.pop(idx)

		self._fact.delete(remoenv)
		self.fill_gui(self._project)

	def m_prepsLCTRLOnLeftDClick(self, event):
		selit = GuiHelper.get_selected_item(self.m_prepsLCTRL, self._factorpreps)
		if selit is not None:
			self.edit_fact_prep(selit)

