"""Subclass of EditProjectDialog, which is generated by wxFormBuilder."""

import wx
from wx.core import NOT_FOUND
import GeneratedGUI
from PersistClasses import *
from PexDbViewerAddFactorDialog import PexDbViewerAddFactorDialog
from PexDbViewerEditPreparation import PexDbViewerEditPreparation
import sqlitepersist as sqp

# Implementing EditProjectDialog
class PexDbViewerEditProjectDialog( GeneratedGUI.EditProjectDialog ):

	@property
	def project(self):
		return self._project

	def __init__( self, parent, fact : sqp.SQFactory, proj : Project ):
		GeneratedGUI.EditProjectDialog.__init__( self, parent )

		self._fact = fact
		self._project = proj

	def EditProjectDialogOnShow( self, event ):
		if event.Show is False:
			return

		self._preps = []
		connf_q = sqp.SQQuery(self._fact, ProjectFactorPreparation).where(ProjectFactorPreparation.ProjectId==self._project._id)
		self._preps = list(connf_q)

		self.fill_gui(self._project, self._preps)

	def fill_gui(self, pro, factpreps):
		self.m_nameTB.SetValue(pro.name)
		self.m_isArchivedCBX.SetValue(pro.isarchived)
		ps_q = sqp.SQQuery(self._fact, ProjectStatusCat).where(ProjectStatusCat.LangCode==self._fact.lang)
		self._pstatcat = []
		ct = 0
		sel = wx.NOT_FOUND
		for ps in ps_q:
			self._pstatcat.append(ps)
			if not pro.status is None and ps.code == pro.status.code:
				sel = ct
			ct += 1
		choicevals = list(map(lambda ps : ps.value, self._pstatcat))
		self.m_projectstatusCOB.SetItems(choicevals)
		self.m_projectstatusCOB.SetSelection(sel)

		self.m_prepsLCTRL.ClearAll()
		self.m_prepsLCTRL.InsertColumn(0, "Factor", width=200)
		self.m_prepsLCTRL.InsertColumn(1, "Minimum value", wx.LIST_FORMAT_RIGHT)
		self.m_prepsLCTRL.InsertColumn(2, "Maximum value",  wx.LIST_FORMAT_RIGHT)
		self.m_prepsLCTRL.InsertColumn(3, "Number of levels",  wx.LIST_FORMAT_RIGHT)

		ct = 0
		for prep in self._preps:
			idx = self.m_prepsLCTRL.InsertItem(self.m_prepsLCTRL.GetColumnCount(), prep.factordefinition.name)
			self.m_prepsLCTRL.SetItemData(idx, ct)
			self.m_prepsLCTRL.SetItem(idx, 1, str(prep.minvalue))
			self.m_prepsLCTRL.SetItem(idx, 2, str(prep.maxvalue))
			self.m_prepsLCTRL.SetItem(idx, 3, str(prep.levelnum))
			ct += 1
		

	def m_okcancelBUTSOnOKButtonClick( self, event ):
		self._project.name = self.m_nameTB.GetValue()
		self._project.isarchived = self.m_isArchivedCBX.GetValue()

		statidx = self.m_projectstatusCOB.GetSelection()
		if statidx == wx.NOT_FOUND:
			self._project.status = None
		else:
			self._project.status = self._pstatcat[statidx]

		self.EndModal(wx.ID_OK)

	def m_connfactorBUOnButtonClick( self, event ):
		dial = PexDbViewerAddFactorDialog(self, self._fact, list(map(lambda pr : pr.factordefinitionid, self._preps)))
		res = dial.ShowModal()

		if res == wx.ID_CANCEL:
			return

		newfact = dial.selectedfactor

		newprep = ProjectFactorPreparation(projectid=self._project._id, 
			factordefinitionid = newfact._id,
			factordefinition=newfact,
			minvalue = newfact.defaultmin,
			maxvalue = newfact.defaultmax,
			levelnum = newfact.defaultlevelnum)

		self._fact.flush(newprep)
		self._preps.append(newprep)
		self.fill_gui(self._project, self._preps)


	def m_removefactorBUOnButtonClick( self, event ):
		selidx = self.m_prepsLCTRL.GetFirstSelected()

		if selidx==wx.NOT_FOUND:
			wx.MessageBox("please select a factor preparation to be removed")
			return

		idx = self.m_prepsLCTRL.GetItemData(selidx)
		remoprep = self._preps.pop(idx)

		self._fact.delete(remoprep)		
		self.fill_gui(self._project, self._preps)

	def editPrepBUOnButtonClick(self, event):
		selidx = self.m_prepsLCTRL.GetFirstSelected()

		if selidx==wx.NOT_FOUND:
			wx.MessageBox("please select a factor preparation to be edited")
			return

		idx = self.m_prepsLCTRL.GetItemData(selidx)
		
		dial = PexDbViewerEditPreparation(self, self._preps[idx])
		res = dial.ShowModal()
		if res == wx.ID_CANCEL:
			return

		self._fact.flush(dial.editedprep)
		self._preps[idx] = dial.editedprep
		self.fill_gui(self._project, self._preps)

