"""Subclass of EditFactorDefinitions, which is generated by wxFormBuilder."""
import sys
import wx
import GeneratedGUI
from PersistClasses import *
import sqlitepersist as sqp
import PropGridGUIMappers as pgum


# Implementing EditFactorDefinitions
class PexDbViewerEditFactorDefinitions(GeneratedGUI.EditFactorDefinitions):
	def __init__( self, parent, sqpfactory : sqp.SQFactory):
		if sqpfactory is None:
			raise Exception("please supply a sqlite persist factory on init of this gui class")

		GeneratedGUI.EditFactorDefinitions.__init__( self, parent )
		self._fact = sqpfactory
		self._factor_defs = []
		self._currentfdef = None

	# Handlers for EditFactorDefinitions events.
	def EditFactorDefinitionsOnShow( self, event ):
		#the dialog is shown or deshown

		if event.Show is False: #the dialog was closed
			return

		self._factgui = pgum.WxGuiMapperFactorDefintion(self._fact, self.m_factorDtaPG)

		fact_q = sqp.SQQuery(self._fact, FactorDefinition).where(FactorDefinition.IsActive==True)
		self.m_factorDefsLC.InsertColumn(0, "abbreviation")
		self.m_factorDefsLC.InsertColumn(1, "name")
		self.m_factorDefsLC.InsertColumn(2, "active")
		ct = 0
		for fact in fact_q:
			self._factor_defs.append(fact)
			lidx = self.m_factorDefsLC.InsertItem(self.m_factorDefsLC.GetItemCount(), fact.abbreviation)
			self.m_factorDefsLC.SetItemData(lidx, ct)
			self.m_factorDefsLC.SetItem(lidx, 1, fact.name)
			self.m_factorDefsLC.SetItem(lidx, 2, str(fact.isactive))
			ct += 1

	def _get_as_item(self, fact, id) -> wx.ListItem:
		li = wx.ListItem()
		li.SetData(id) #store initial sequence number as data to be able to find the full data in local list with this id
		li.SetText(fact.name)
		li.SetId(id)
		return li

	def m_factorDefsLCOnListItemSelected( self, event ):
		selidx = self.m_factorDefsLC.GetFirstSelected()
		if selidx < 0:
			return

		myidx = self.m_factorDefsLC.GetItemData(selidx)
		selfactdef = self._factor_defs[myidx]
		self._currentfdef = selfactdef
		valdict = {}
		fetchthese = ["name", "abbreviation", "disptype", "unit", "isactive", "curaname"]
		for attnam in fetchthese:
			valdict[attnam] = selfactdef.__getattribute__(attnam)

		self._factgui.object2gui(valdict, self.m_factorDtaPG)

	def m_factorDtaPGOnPropertyGridChanged( self, event ):
		vald = self._factgui.gui2object(self.m_factorDtaPG)
		fetchthese = ["name", "abbreviation", "disptype", "unit", "isactive", "curaname"]
		for name in fetchthese:
			self._currentfdef.__setattr__(name, vald[name])

		self._fact.flush(self._currentfdef)


	def m_closeBUOnButtonClick( self, event ):
		self.Close()