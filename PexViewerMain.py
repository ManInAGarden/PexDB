"""Subclass of PexViewerMainFrame, which is generated by wxFormBuilder."""

from datetime import datetime
import wx
import GeneratedGUI as gg #import generated GUI
from ConfigReader import *
import sqlitepersist as sqp
from PersistClasses import *

# Implementing PexViewerMainFrame
class PexViewerMain( gg.PexViewerMainFrame ):
	def __init__(self, parent ):
		#gg.PexViewerMainFrame.__init__( self, parent )
		super().__init__(parent)
		self.init_prog()
		self.init_db()
		self.init_gui()

	def init_prog(self):
		self._configuration = ConfigReader("./PexDb.conf")

	def init_db(self):
		dbfilename = self._configuration.get_value("database", "filename")
		self._fact = sqp.SQFactory("PexDb", dbfilename)
		doinits = self._configuration.get_value("database", "tryinits")
		if doinits:
			self._initandseeddb()

	def repair_pg_names(self):
		self.m_carriedoutdtPGI.SetName("carriedoutdt")
		self.m_descriptionPGI.SetName("description")
		self.m_printerPGI.SetName("printer")
		self.m_extruderPGI.SetName("extruder")
		
	def init_gui(self):
		self._prefprinter = self._get_preferred_printer()
		self._prefextruder = self._get_preferred_extruder()
		self.repair_pg_names()
		self._experiments = self.get_experiments()
		self.refresh_dash()

	def _get_preferred_printer(self):
		abbr = self._configuration.get_value("preferences", "stdprinter")
		answ = sqp.SQQuery(self._fact, Printer).where(Printer.Abbreviation==abbr).first_or_default(None)
		return answ

	def _get_preferred_extruder(self):
		abbr = self._configuration.get_value("preferences", "stdextruder")
		answ = sqp.SQQuery(self._fact, Extruder).where(Extruder.Abbreviation==abbr).first_or_default(None)
		return answ
	
	def refresh_dash(self):
		self.m_experimentsDataViewListCtrl.DeleteAllItems()
		for exp in self._experiments:
			visr = [str(exp.carriedoutdt), exp.description]
			self.m_experimentsDataViewListCtrl.AppendItem(visr)
		
	def get_experiments(self):
		q = sqp.SQQuery(self._fact, Experiment).where(Experiment.IsArchived == False).order_by(Experiment.CarriedOutDt)
		experiments = []
		for exp in q:
			self._fact.fill_joins(exp, Experiment.Settings)
			experiments.append(exp)

		return experiments

	def _initandseeddb(self):
		pclasses = [sqp.PCatalog, Unit, Experiment, Printer, Extruder, Parameter, Setting]
		createds = []
		for pclass in pclasses:
			done = self._fact.try_createtable(pclass)
			if done:
				createds.append(pclass)

		if sqp.PCatalog in createds:
			sdr = sqp.SQPSeeder(self._fact, "./PexSeeds/catalogs.json")
			sdr.create_seeddata()

		if Unit in createds:
			sdr = sqp.SQPSeeder(self._fact, "./PexSeeds/units.json")
			sdr.create_seeddata()

		if Parameter in createds:
			sdr = sqp.SQPSeeder(self._fact, "./PexSeeds/parameters.json")
			sdr.create_seeddata()

		if Printer in createds:
			sdr = sqp.SQPSeeder(self._fact, "./PexSeeds/printers.json")
			sdr.create_seeddata()

		if Extruder in createds:
			sdr = sqp.SQPSeeder(self._fact, "./PexSeeds/extruders.json")
			sdr.create_seeddata()
	
	# Handlers for PexViewerMainFrame events.
	def quit_PexViewer( self, event ):
		"""The user selected the menu item "close PexDbViewer"
		"""
		self.Close()
		
	def create_new_experiment( self, event ):
		"""The user selected the menuitem "create new experiment"
		"""
		exp = Experiment(carriedoutdt=datetime.now(), 
			description="Neues Experiment")
		
		if self._prefextruder is not None:
			exp.extruderused = self._prefextruder
			exp.extruderusedid = self._prefextruder._id

		if self._prefprinter is not None:
			exp.printerused = self._prefprinter
			exp.printerusedid = self._prefprinter._id

		self._fact.flush(exp)

		#create new settings for the experiment from all the active parameters
		exp.settings = []
		actparaq = sqp.SQQuery(self._fact, Parameter).where(Parameter.IsActive==True)
		for acts in actparaq:
			setg = Setting(parameterid=acts._id, experimentid=exp._id)
			self._fact.flush(setg)
			exp.settings.append(setg)

		self._experiments.append(exp)
		self.refresh_dash()

	def experimentDWLC_selchanged( self, event ):
		"""The user selected a row in the list of experiments"""
		idx = self.m_experimentsDataViewListCtrl.GetSelectedRow()
		if idx == wx.NOT_FOUND:
			return

		selexp = self._experiments[idx]
		self.refresh_expview(selexp)

	def refresh_expview(self, exp):
		membs = ["description", "carriedoutdt"]
		for memb in membs:
			self.m_experimentPG.ChangePropertyValue(memb, exp.__getattribute__(memb))

		if exp.printerused is not None:
			self.m_experimentPG.ChangePropertyValue("printer", str(exp.printerused))

		if exp.extruderused is not None:
			self.m_experimentPG.ChangePropertyValue("extruder", str(exp.extruderused))


if __name__ == '__main__':
	app = wx.App()
	frm = PexViewerMain(None)
	frm.Show()
	app.MainLoop()
	


