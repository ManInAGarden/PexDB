"""Subclass of CreateFractDetail, which is generated by wxFormBuilder."""
from email.message import Message
from tkinter import messagebox
from xml.dom import NotSupportedErr
import wx
import GeneratedGUI
from creators.CreaBasics import CreaSequenceEnum
from creators.CreaFractFactorial import CreaFractFactorial

import sqlitepersist as sqp
import creators as cr
from PersistClasses import *

# Implementing CreateFractDetail
class PexDbViewerCreateFractDetailDialog( GeneratedGUI.CreateFractDetail ):
	def __init__( self, parent, dbfact, project, printer, extruder ):
		GeneratedGUI.CreateFractDetail.__init__( self, parent)
		self._fact = dbfact
		self._project = project
		self._printer = printer
		self._extruder = extruder
		self._sequence = cr.CreaSequenceEnum.LINEAR

	def _getformula(self, cprep):
		answ = ""

		if cprep.factordefs is None:
			return answ

		if cprep.isnegated:
			answ += "-"

		for finter in cprep.factordefs:
			answ += "<{}>".format(finter.factordefinition.name)

		return answ
		
	def _getstr(self, ins):
		if ins is None:
			return ""
		else:
			return str(ins)

	def fill_combipreps_gui(self):
		self.m_combiPrepsLCTR.DeleteAllItems()
		for i in range(len(self._combipreps)):
			cprep = self._combipreps[i]
			currct = self.m_combiPrepsLCTR.GetItemCount()
			itm = self.m_combiPrepsLCTR.InsertItem(currct, self._getstr(cprep.name))
			self.m_combiPrepsLCTR.SetItemData(itm, i)
			self.m_combiPrepsLCTR.SetItem(itm, 1, self._getformula(cprep))

	# Handlers for CreateFractDetail events.
	def CreateFractDetailOnInitDialog( self, event ):
		combi_q = sqp.SQQuery(self._fact, FactorCombiPreparation).where(FactorCombiPreparation.ProjectId==self._project._id)
		self._combipreps = list(combi_q)
		for combip in self._combipreps:
			self._fact.fill_joins(combip, FactorCombiPreparation.FactorDefs)
			
		self.m_combiPrepsLCTR.AppendColumn("factor name")
		self.m_combiPrepsLCTR.AppendColumn("combi definition")

	def CreateFractDetailOnShow( self, event ):
		if not event.Show:
			return

		self.fill_combipreps_gui()
		
	def m_addCombiBUTOnButtonClick( self, event ):
		combi = FactorCombiPreparation(projectid=self._project._id, name="new factor combi")
		self._fact.flush(combi)
		self._combipreps.append(combi)
		self.fill_combipreps_gui()


	def _get_selected_combi(self):
		selidx = self.m_combiPrepsLCTR.GetFirstSelected()
		if selidx == wx.NOT_FOUND:
			return selidx, None
		
		dtaidx = self.m_combiPrepsLCTR.GetItemData(selidx)
		return dtaidx, self._combipreps[dtaidx]

	def m_removeCombiBUTOnButtonClick( self, event ):
		sidx, selcombi = self._get_selected_combi()
		if selcombi is None:
			wx.MessageBox("Select a combi preparation first to delete it")
			return

		self._fact.delete(selcombi)
		self._combipreps.pop(sidx)
		self.fill_combipreps_gui()

	def m_editCombiBUTOnButtonClick( self, event ):
		sidx, selcombi = self._get_selected_combi()
		if selcombi is None:
			wx.MessageBox("Select a combi preparation first to delete it")
			return

		dial = PexDbViewerEditFactCombi(self, self._fact, self._project, selcombi)
		res = dial.ShowModal()
		if res == wx.ID_OK:
			self._combipreps[sidx] = dial.factcombi
			self.fill_combipreps_gui()

	def _get_sequence_enum(self) -> CreaSequenceEnum:
		seqidx = self.m_sequenceCHOI.GetSelection()
		if seqidx == wx.NOT_FOUND:
			raise Exception("No sequence selected - please select a sequence")

		if seqidx == 0:
			return CreaSequenceEnum.LINEAR
		elif seqidx == 1:
			return CreaSequenceEnum.MIXED
		else:
			raise NotSupportedErr("Usupported choice index for sequence")
		
	def _get_datetime(self, wxdt : wx.DateTime):
		# mostly stolen from here:
		# https://www.blog.pythonlibrary.org/2014/08/27/wxpython-converting-wx-datetime-python-datetime/
		
		if wxdt is None:
			return None
		assert isinstance(wxdt, wx.DateTime)
		if wxdt.IsValid():
			ymd = map(int, wx.FormatISODate().split('-'))
			return datetime.date(*ymd)
		else:
			return None

	def m_sdbSizer6OnOKButtonClick( self, event ):
		try:
			seq = self._get_sequence_enum()
			plandt = self._get_datetime(self.m_datePicker1.GetValue())
			reps = self.m_repetitionsSPCTRL.GetValue()
			combidefs = self._combipreps
			crea = CreaFractFactorial(self._fact,
				self._project,
				self._printer,
				self._extruder,
				seq,
				plandt,
				reps,
				combidefs)
			
			experi_ct = crea.create()
			wx.MessageBox("{} experiments have been created.".format(experi_ct))
			
			self.EndModal(wx.ID_OK)
		except Exception as exc:
			wx.MessageBox("Error during experiment creation. Original message: {}".format(str(exc)))



