"""Subclass of CreateFractDetail, which is generated by wxFormBuilder."""
from email.message import Message
from tkinter import messagebox
from xml.dom import NotSupportedErr
import wx
import logging
import GeneratedGUI
from creators.CreaBasics import CreaSequenceEnum
from creators.CreaFractFactorial import CreaFractFactorial

import sqlitepersist as sqp
import creators as cr
from PersistClasses import *

# Implementing CreateFractDetail
class PexDbViewerCreateFractDetailDialog( GeneratedGUI.CreateFractDetail ):
	def __init__( self, parent, dbfact, project, printer, extruder ):
		GeneratedGUI.CreateFractDetail.__init__( self, parent)
		self._fact = dbfact
		self._project = project
		self._printer = printer
		self._extruder = extruder
		self._sequence = cr.CreaSequenceEnum.LINEAR
		self._experi_cts = 0
		self._logger = logging.getLogger("mainprog")
		self._logger.debug("Dialog %s inited", self.__class__.__name__)
		self._do_init_dialog()

	@property
	def numexps(self):
		return self._experi_cts

	def _getformula(self, cprep):
		answ = ""

		if cprep.factordefs is None:
			return answ

		if cprep.isnegated:
			answ += "-"

		for finter in cprep.factordefs:
			answ += "<{}>".format(finter.factordefinition.name)

		return answ
		
	def _getstr(self, ins):
		if ins is None:
			return ""
		else:
			return str(ins)

	def _get_factordefstr(self):
		havesome = False
		fstr = None
		first = True
		for fprep in self._factpreps:
			if first:
				fstr = "<p>" + fprep.factordefinition.name
				first = False
			else:
				fstr += "<br><p>" + fprep.factordefinition.name

			if fprep.iscombined:
				havesome = True
				self._fact.fill_joins(fprep, ProjectFactorPreparation.FactorCombiDefs)
				first_2 = True
				if fprep.isnegated:
					fstr += " = -"
				else:
					fstr += " = "

				for fcdinter in fprep.factorcombidefs:
					if first_2:
						first_2 = False
						fstr += "&lt;" + fcdinter.factordefinition.name + "&gt"
					else:
						fstr += "*" + "&lt;" + fcdinter.factordefinition.name  + "&gt"
				
			fstr += "</p>"

		return havesome, fstr

	def fill_combipreps_gui(self):
		havesome, factstr = self._get_factordefstr()
		html = "<html><body>"
		if havesome:
			html += "<h1>Combination definition</h1>"
			html += "<p>(like defined in project factor preparations)</p>"
			html += "<p>"
			html += factstr
			html += "</p>"
		elif factstr is not None:
			html += "No factor combinations are defined in the factor factor preparations of this project. "
			html += "A full factorial scheme will be used to create the experiments."
		else:
			html += "No factor preperations where found for this project. "
			html += "Creation of experiments will be IMPOSSIBLE under these circumstances."

		html += "</body></html>"

		self.m_combiInfoHTML.SetPage(html)

	# Handlers for CreateFractDetail events.
	def _do_init_dialog(self):
		self._logger.debug("do_init_dialog for %s", self.__class__.__name__)
		self._factpreps = list(sqp.SQQuery(self._fact, ProjectFactorPreparation).where(ProjectFactorPreparation.ProjectId==self._project._id))

	def CreateFractDetailOnShow( self, event ):
		if not event.Show:
			return

		self.fill_combipreps_gui()
		self.Fit()

	def _get_sequence_enum(self) -> CreaSequenceEnum:
		seqidx = self.m_sequenceCHOI.GetSelection()
		if seqidx == wx.NOT_FOUND:
			raise Exception("No sequence selected - please select a sequence")

		if seqidx == 0:
			return CreaSequenceEnum.LINEAR
		elif seqidx == 1:
			return CreaSequenceEnum.MIXED
		else:
			raise NotSupportedErr("Usupported choice index for sequence")
		
	def _get_datetime(self, wxdt : wx.DateTime):		
		if wxdt is None:
			return None
		assert isinstance(wxdt, wx.DateTime)
		if wxdt.IsValid():
			return datetime(wxdt.year, wxdt.month+1, wxdt.day)
		else:
			return None

	def m_sdbSizer6OnOKButtonClick( self, event ):
		try:
			seq = self._get_sequence_enum()
			plandt = self._get_datetime(self.m_datePicker1.GetValue())
			reps = self.m_repetitionsSPCTRL.GetValue()
			docentre = self.m_createCentreExpCKBX.GetValue()

			self._logger.debug("Creating experiments according a fractional factorial scheme for project <%s>", 
				self._project.name)

			crea = CreaFractFactorial(self._fact,
				self._project,
				self._printer,
				self._extruder,
				seq,
				plandt,
				reps,
				docentre)
			
			self._experi_cts = crea.create()

			self.EndModal(wx.ID_OK)
		except Exception as exc:
			self._logger.error("Error during experiment creation. Original message: %s", str(exc))
			wx.MessageBox("Error during experiment creation. Original message: {}".format(str(exc)))



