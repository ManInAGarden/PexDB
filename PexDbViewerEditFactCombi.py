"""Subclass of EditFactCombi, which is generated by wxFormBuilder."""

from winsound import MessageBeep
import wx
import GeneratedGUI
from PexDbViewerAddSubElementDialog import PexDbViewerAddSubElementDialog
import sqlitepersist as sqp
from PersistClasses import *

# Implementing EditFactCombi
class PexDbViewerEditFactCombi( GeneratedGUI.EditFactCombi ):
	def __init__( self, parent, fact : sqp.SQFactory, proj : Project, combi : FactorCombiPreparation ):
		GeneratedGUI.EditFactCombi.__init__(self, parent)
		self._f = fact
		self._p = proj
		self._comb = combi
		self._f.fill_joins(self._comb, FactorCombiPreparation.FactorDefs) #sequence of this and next is important!
		self._oldinter = list(self._comb.factordefs)


	@property
	def factcombi(self):
		return self._comb

	# Handlers for EditFactCombi events.
	def EditFactCombiOnInitDialog(self, event):
		self.m_factCombisLCTRL.AppendColumn("Name")
		self.m_factCombisLCTRL.AppendColumn("Abbreviation")

	def _getstr(self, indat):
		if indat is None:
			return ""
		else:
			return str(indat)

	def EditFactCombiOnShow(self, event):
		self.m_combiNameTXTC.SetValue(self._comb.name)
		self.m_isNegatedCBX.SetValue(self._comb.isnegated)
		self.show_factdefs()

	def show_factdefs(self):
		self.m_factCombisLCTRL.DeleteAllItems()
		if self._comb.factordefs is not None:
			ct = 0
			for defi in self._comb.factordefs:
				fdef = defi.factordefinition
				itm = self.m_factCombisLCTRL.InsertItem(self.m_factCombisLCTRL.GetItemCount(), self._getstr(fdef.name))
				self.m_factCombisLCTRL.SetItemData(itm, ct)
				self.m_factCombisLCTRL.SetItem(itm, 1, self._getstr(fdef.abbreviation))
				ct += 1

	def m_addFactorBUTOnButtonClick( self, event ):
		prep_fdef_ids = list(sqp.SQQuery(self._f, ProjectFactorPreparation).where(ProjectFactorPreparation.ProjectId==self._p._id).select(lambda fprep : fprep.factordefinitionid))
		not_these_ids = list(map(lambda fd : fd.downid, self._comb.factordefs))
		q = sqp.SQQuery(self._f, FactorDefinition).where(sqp.IsIn(FactorDefinition.Id, prep_fdef_ids) & sqp.NotIsIn(FactorDefinition.Id, not_these_ids))
		dial = PexDbViewerAddSubElementDialog(self, self._f, q, "factor definition")
		res = dial.ShowModal()
		if res == wx.ID_OK:
			defi = FactorCombiDefInter(upid = self._comb._id, 
				factordefinition = dial.selected, 
				downid = dial.selected._id)
			self._comb.factordefs.append(defi)
			self.show_factdefs()

	def m_removeFactorBUTOnButtonClick( self, event ):
		itm = self.m_factCombisLCTRL.GetFirstSelected()
		if itm == wx.NOT_FOUND:
			return

		itmdta = self.m_factCombisLCTRL.GetItemData(itm)
		self._comb.factordefs.pop(itmdta)
		self.show_factdefs()
		

	def m_mainBTNBAROnOKButtonClick( self, event ):
		self._comb.name = self.m_combiNameTXTC.GetValue()
		self._comb.isnegated = self.m_isNegatedCBX.GetValue()

		doclose = False
		self._f.begin_transaction()
		try:
			self._f.flush(self._comb)
			if self._comb.factordefs is not None:
				for cdefinter in self._comb.factordefs:
					self._f.flush(cdefinter)

			for inter in self._oldinter:
				if inter not in self._comb.factordefs:
					self._f.delete(inter)

			self._f.commit_transaction()
			doclose = True
		except Exception as exc:
			wx.MessageBox("Error during db operations, rolling back: {}".format(str(exc)))
			self._f.rollback_transaction()

		if doclose: 
			self.EndModal(wx.ID_OK)

